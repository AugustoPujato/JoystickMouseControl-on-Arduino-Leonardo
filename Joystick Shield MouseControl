/*
  Joystick Shield MouseControl 
 
 Controla el mouse desde un joystick Shield en una Arduino Leonardo.
 Use el pulsador C para activar o desactivar el control del mause, el
 pulsador A para Click Izquierdo y el pulsador B para click derecho.
 (Controls the mause from a Joystick Shield on an Arduino Leonardo.
 Uses pushbutton C to turn on and off mouse control, the  
 pushbutton A to click the left mouse button and pushbutton B to
 click right)

 
 Hardware:
 * JoyStick shield iteadstudio http://imall.iteadstudio.com/im120417014.html
 
 The mouse movement is always relative. This sketch reads 
 two analog inputs that range from 0 to 1023 (or less on either end)
 and translates them into ranges of -6 to 6. 
 The sketch assumes that the joystick resting values are around the 
 middle of the range, but that they vary within a threshold.
 
 WARNING:  When you use the Mouse.move() command, the Arduino takes
 over your mouse!  Make sure you have control before you use the command.
 This sketch includes a pushbutton to toggle the mouse control state, so
 you can turn on and off mouse control.
 
 created 15 Sept 2011
 updated 28 Mar 2012
 by Tom Igoe
 
 this code is in the public domain
 
 Modificado por(modification by)
 por Jose Augusto Pujato
 8 Abr 2014
 
 */
// set pin numbers for switch, joystick axes, and LED:
const int switchPin = 5;      // switch to turn on and off mouse control
const int mouseButton = 7;    // input pin for the mouse pushButton
const int mouseButtonR = 6; //clic derecho (Click Right)
const int xAxis = A1;         // joystick X axis  
const int yAxis = A0;         // joystick Y axis 
const int ledPin = 13;         // Mouse control LED (pin 5 remplazado por pin 13)(pin 5 replacement pin 13)

// parameters for reading the joystick:
int range = 12;               // output range of X or Y movement
int responseDelay = 5;        // response delay of the mouse, in ms
int threshold = range/4;      // resting threshold
int center = range/2;         // resting position value

boolean mouseIsActive = false;    // whether or not to control the mouse
int lastSwitchState = LOW;        // previous switch state

void setup() {
  pinMode(switchPin, INPUT);       // the switch pin
  pinMode(ledPin, OUTPUT);         // the LED pin  
 // take control of the mouse:
  Mouse.begin();
}

void loop() {
  // read the switch:
  int switchState = digitalRead(switchPin);
  // if it's changed and it's high, toggle the mouse state:
  if (switchState != lastSwitchState) {
    if (switchState == LOW) //HIGH reemplazado por LOW (HIGH replacement LOW)
    {
      mouseIsActive = !mouseIsActive;
      // turn on LED to indicate mouse state:
      digitalWrite(ledPin, mouseIsActive);
    } 
  }
  // save switch state for next comparison:
  lastSwitchState = switchState;

  // read and scale the two axes:
  int xReading = readAxis(A1);
  int yReading = readAxis(A0);

  // if the mouse control state is active, move the mouse:
  if (mouseIsActive) {
    Mouse.move(xReading, -yReading, 0); //Remplazado yReading por -yReading (yReading replacement -yReading)
  }  

  // read the mouse button and click or not click:
  // if the mouse button is pressed:
  if (digitalRead(mouseButton) == LOW)//HIGH reemplazado por LOW (HIGH replacement LOW)
  {
    // if the mouse is not pressed, press it:
    if (!Mouse.isPressed(MOUSE_LEFT)) {
      Mouse.press(MOUSE_LEFT); 
    }
  } 
  // else the mouse button is not pressed:
  else {
    // if the mouse is pressed, release it:
    if (Mouse.isPressed(MOUSE_LEFT)) {
      Mouse.release(MOUSE_LEFT); 
    }
  }
   if (digitalRead(mouseButtonR) == LOW)//Clic derecho (Click right)
  {
    // if the mouse is not pressed, press it:
    if (!Mouse.isPressed(MOUSE_RIGHT)) {
      Mouse.press(MOUSE_RIGHT); 
    }
  } 
  // else the mouse button is not pressed:
  else {
    // if the mouse is pressed, release it:
    if (Mouse.isPressed(MOUSE_RIGHT)) {
      Mouse.release(MOUSE_RIGHT); 
    }
  }
  delay(responseDelay);
}

/*
  reads an axis (0 or 1 for x or y) and scales the 
 analog input range to a range from 0 to <range>
 */

int readAxis(int thisAxis) { 
  // read the analog input:
  int reading = analogRead(thisAxis);

  // map the reading from the analog input range to the output range:
  reading = map(reading, 0, 1023, 0, range);

  // if the output reading is outside from the
  // rest position threshold,  use it:
  int distance = reading - center;

  if (abs(distance) < threshold) {
    distance = 0;
  } 

  // return the distance for this axis:
  return distance;
}
